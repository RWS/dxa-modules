<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.5">

    <!-- Remember to run msbuild ciBuild.csproj /t:Restore first so the MSBuild extension package is installed from nuget -->
    <Import Project="packages\MSBuild.Extension.Pack.1.9.1\build\net40\MSBuild.Extension.Pack.targets" Condition="Exists('packages\MSBuild.Extension.Pack.1.9.1\build\net40\MSBuild.Extension.Pack.targets')"/>
  
  <PropertyGroup>
    <BuildConfiguration>Release</BuildConfiguration>
    <ProjectDirectory>$(MSBuildProjectDirectory)</ProjectDirectory>    

    <!-- Version -->
    <Version Condition="'$(VERSION)' == ''">0.0.0.0</Version>
    <Version Condition="'$(VERSION)' != ''">$(VERSION)</Version>
    <VersionMajor>$(Version.Split('.')[0])</VersionMajor>
    <VersionMinor>$(Version.Split('.')[1])</VersionMinor>
    <VersionPatch>$(Version.Split('.')[2])</VersionPatch>
    <VersionBuild>$(Version.Split('.')[3])</VersionBuild>
    <PackageVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch)</PackageVersion>

    <!--Tools-->
    <NuGet>&quot;$(ProjectDirectory)\_tools\NuGet.exe&quot;</NuGet>

    <MsBuildExe>C:\Program Files (x86)\MSBuild\12.0\Bin\MSBuild.exe</MsBuildExe>
    <PowerShellx64 Condition="'$(PROCESSOR_ARCHITECTURE)' == 'x86' AND '$(PROCESSOR_ARCHITEW6432)' != ''">C:\Windows\Sysnative\WindowsPowerShell\v1.0\powershell.exe</PowerShellx64>
    <PowerShellx64 Condition="'$(PROCESSOR_ARCHITECTURE)' == 'x86' AND '$(PROCESSOR_ARCHITEW6432)' == ''">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellx64>
    <PowerShellx64 Condition="'$(PROCESSOR_ARCHITECTURE)' != 'x86'">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellx64>
  </PropertyGroup>

  <!-- ======================================================================================================================= -->
  <!-- You should run msbuild with this target first to make sure all packages are installed before building everything else   -->
  <!-- ======================================================================================================================= -->
  <Target Name="Restore">
      <Message Text="Clearing NuGet cache..."/>
      <Exec Command="$(NuGet) locals all -Clear" />
      <Message Text="Restoring NuGet packages..."/>
      <Exec Command="_tools\RestorePackages DxaModules.sln" WorkingDirectory="$(ProjectDirectory)" />
  </Target>

  <!-- =============================================================================================================================================  -->
  <Target Name="Build">
    <Message Text="Start build..." Importance="high" />
        
    <CallTarget Targets="PrepareBuild"/>
    <CallTarget Targets="RunBuild"/>    
  </Target>

  <!-- =============================================================================================================================================  -->
  <Target Name="PrepareBuild">
      <Message Text="Preparing build..." Importance="high" />
      <Message Text="Setting Assembly Info"/>

      <ItemGroup>
      <AssemblyInfoFile Include="$(ProjectDirectory)\CommonAssemblyInfo.cs">
        <Attributes>Normal</Attributes>
      </AssemblyInfoFile>
    </ItemGroup>

    <Message Text="Setting Assembly Info @(AssemblyInfoFile)"/>

    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="Get" Format="yyyy">
      <Output TaskParameter="Result" PropertyName="Year"/>
    </MSBuild.ExtensionPack.Framework.DateAndTime>

    <MSBuild.ExtensionPack.FileSystem.File TaskAction="SetAttributes" Files="@(AssemblyInfoFile)"/>

    <MSBuild.ExtensionPack.Framework.AssemblyInfo
      AssemblyInfoFiles="@(AssemblyInfoFile)"
      AssemblyVersion="$(Version)"
      AssemblyFileVersion="$(VersionMajor).$(VersionMinor).$(VersionPatch).$(VersionBuild)"
      AssemblyCopyright="Copyright &#169; 2014-$(Year) RWS Group"
      SkipVersioning="false"
    />

      <Message Text="Restoring NuGet packages for extensions..."/>
      <Exec Command="_tools\RestorePackages DxaModules.sln" WorkingDirectory="$(ProjectDirectory)" />
  </Target>

  <!-- =============================================================================================================================================  -->
  <Target Name="RunBuild">
      <Message Text="Running build commands..." Importance="high" />

      <Message Text="Building all modules in '$(BuildConfiguration)' configuration..."/>
      <MSBuild 
          Projects="$(ProjectDirectory)\DxaModules.sln" 
          Properties="Configuration=$(BuildConfiguration);Platform=Any CPU;AsmVersion=$(Version);FileVersion=$(Version)" 
          Targets="Build" 
          StopOnFirstFailure="true" 
          />
  </Target>

  <!-- =============================================================================================================================================  -->
  

  <!-- ========================================================================================================================== -->
  <PropertyGroup>
     <DstFolder>$(ProjectDirectory)\dist</DstFolder>     
     <InstallationFolder>$(ProjectDirectory)\..\installation</InstallationFolder>      
  </PropertyGroup>

  <ItemGroup>
    <ModulePath
      Include="$([System.IO.Directory]::GetDirectories(&quot;$(ProjectDirectory)&quot;))"
      Exclude="$(ProjectDirectory)\_references;$(ProjectDirectory)\_tools;$(ProjectDirectory)\packages;$(ProjectDirectory)\dist"
    />
  </ItemGroup>

  <Target Name="Artifacts">
      <Message Text="Generating artifacts ..." Importance="high" />

      <RemoveDir Directories="$(DstFolder)" />
      
      <CallTarget Targets="DeployModules"/>

      <RemoveDir Directories="$(DstFolder)\tmp" />
  </Target>

  <!--Note: this target gets executed for each Module -->
  <Target Name="DeployModules" Inputs="@ModulePath" Outputs="%(ModulePath.Identity)">
    <PropertyGroup>   
      <ModuleName>$([System.IO.Path]::GetFilename(&quot;%(ModulePath.Identity)&quot;))</ModuleName>      
      <DstModuleFolder>$(DstFolder)\tmp\SDL.DXA.$(ModuleName).Module.$(PackageVersion)\modules\$(ModuleName)</DstModuleFolder>
      <ContentFolder>$(InstallationFolder)\$(ModuleName)\cms</ContentFolder>
      <ScriptsFolder>$(InstallationFolder)\$(ModuleName)\scripts</ScriptsFolder>          
    </PropertyGroup>

    <Message Text="Deploying module '$(ModuleName)' to '$(DstModuleFolder)'..." />

    <ItemGroup>
      <AreaFiles Include="%(ModulePath.Identity)\Areas\**\*" />
      <BinFiles Include="%(ModulePath.Identity)\bin\$(BuildConfiguration)\**\*" />
      <CmContentWeb8 Include="$(ContentFolder)\web8\content\**\*" />
      <CmContentSites9 Include="$(ContentFolder)\sites9\content\**\*" />
	  <CmContentSites10 Include="$(ContentFolder)\sites10\content\**\*" />
      <Scripts Include="$(ScriptsFolder)\**\*.*" />
      <ImportExport Include="$(InstallationFolder)\cms\ImportExport\**\*" />
    </ItemGroup>

    <!-- Copy actual areas and binaries for web application -->
    <Message Text="Copying web application artifacts ..." Importance="high" />        
    <Copy SourceFiles="@(AreaFiles)" DestinationFolder="$(DstModuleFolder)\web\Areas\%(RecursiveDir)" />
    <Copy SourceFiles="@(BinFiles)" DestinationFolder="$(DstModuleFolder)\web\bin\%(RecursiveDir)" />    

    <!-- Package CM content for module if it exists (web8) -->
    <Message Text="Creating CM Content artifacts ..." Importance="high" />
    <MakeDir Directories="$(DstModuleFolder)\web8" Condition="Exists('$(ContentFolder)\web8\content') And !Exists('$(DstModuleFolder)\web8')" />
    <MSBuild.ExtensionPack.Compression.DNZip Condition="Exists('$(DstModuleFolder)\web8')" TaskAction="Create" CompressPath="$(ContentFolder)\web8\content" ZipFileName="$(DstModuleFolder)\web8\module-$(ModuleName).zip" RemoveRoot="$(ContentFolder)\web8\content"/>
    <Copy Condition="Exists('$(ContentFolder)\web8\permissions.xml')" SourceFiles="$(ContentFolder)\web8\permissions.xml" DestinationFolder="$(DstModuleFolder)\web8" />

    <!-- Package CM content for module if it exists (sites9) -->
    <Message Text="Creating CM Content artifacts ..." Importance="high" />
    <MakeDir Directories="$(DstModuleFolder)\sites9" Condition="Exists('$(ContentFolder)\sites9\content') And !Exists('$(DstModuleFolder)\sites9')" />
    <MSBuild.ExtensionPack.Compression.DNZip Condition="Exists('$(DstModuleFolder)\sites9')" TaskAction="Create" CompressPath="$(ContentFolder)\sites9\content" ZipFileName="$(DstModuleFolder)\sites9\module-$(ModuleName).zip" RemoveRoot="$(ContentFolder)\sites9\content"/>
    <Copy Condition="Exists('$(ContentFolder)\sites9\permissions.xml')" SourceFiles="$(ContentFolder)\sites9\permissions.xml" DestinationFolder="$(DstModuleFolder)\sites9" />
	
	<!-- Package CM content for module if it exists (sites10) -->
    <Message Text="Creating CM Content artifacts ..." Importance="high" />
    <MakeDir Directories="$(DstModuleFolder)\sites10" Condition="Exists('$(ContentFolder)\sites10\content') And !Exists('$(DstModuleFolder)\sites10')" />
    <MSBuild.ExtensionPack.Compression.DNZip Condition="Exists('$(DstModuleFolder)\sites10')" TaskAction="Create" CompressPath="$(ContentFolder)\sites10\content" ZipFileName="$(DstModuleFolder)\sites10\module-$(ModuleName).zip" RemoveRoot="$(ContentFolder)\sites10\content"/>
    <Copy Condition="Exists('$(ContentFolder)\sites10\permissions.xml')" SourceFiles="$(ContentFolder)\sites10\permissions.xml" DestinationFolder="$(DstModuleFolder)\sites10" />

    <!-- Copy scripts for module -->
    <Copy SourceFiles="@(Scripts)" DestinationFolder="$(DstModuleFolder)\%(RecursiveDir)"/>

    <!-- Copy Import/Export scripts -->
    <Copy SourceFiles="@(ImportExport)" DestinationFolder="$(DstModuleFolder)\..\..\ImportExport\%(RecursiveDir)"/>
    <Copy SourceFiles="$(InstallationFolder)\cms\DxaDeployUtils.ps1" DestinationFolder="$(DstFolder)\tmp\SDL.DXA.$(ModuleName).Module.$(PackageVersion)\modules"/>
      

    <!-- Produce final module artifact -->
    <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressPath="$(DstFolder)\tmp\SDL.DXA.$(ModuleName).Module.$(PackageVersion)" ZipFileName="$(DstFolder)\SDL.DXA.$(ModuleName).Module.$(PackageVersion).zip" RemoveRoot="$(DstFolder)\tmp\SDL.DXA.$(ModuleName).Module.$(PackageVersion)"/>
    
  </Target>
  
</Project>